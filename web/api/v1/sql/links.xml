<?xml version="1.0"?>
<statements>

<sql id="0001"><![CDATA[
SELECT
	c.tenantid,
	c.connectionid,
	c.destinationid,
	c.connectionguid,
	c.name,
	c.type,
	c.subnet,
	t.shortDescription technology,
	l.linkguid,
	l.ipaddresses,
	l.permission,
	l.status
FROM
	connections c
	JOIN technologies t on c.technologyId = t.technologyId
	LEFT JOIN links l ON c.tenantId = l.tenantId AND c.connectionId = l.connectionId AND l.userGUID = :userGUID
WHERE
	c.tenantId = :tenantId
	AND c.connectionGUID = :connectionGUID
]]></sql>

<sql id="0002"><![CDATA[
INSERT INTO links (
	tenantId,
	connectionId,
	lastChanged,
	ipAddresses,
	userGUID,
	permission,
	status
) VALUES(
	:tenantId,
	:connectionId,
	CURRENT_TIMESTAMP,
	ARRAY[:ipAddress::cidr],
	:userGUID,
	'Queued',
	'Queued'
)
ON CONFLICT (
	tenantId,
	connectionId
) DO UPDATE SET
	lastChanged = CURRENT_TIMESTAMP,
	ipAddresses = CASE WHEN links.ipAddresses IS NULL THEN EXCLUDED.ipAddresses WHEN ARRAY[:ipAddress::cidr] <@ links.ipAddresses THEN EXCLUDED.ipAddresses ELSE array_append(links.ipAddresses, :ipAddress) END,
	permission = 'Reconfiguring'
RETURNING
	*
]]></sql>

<sql id="0002"><![CDATA[
INSERT INTO links (
	tenantId,
	connectionId,
	lastChanged,
	ipAddresses,
	userGUID,
	permission,
	status
) VALUES(
	:tenantId,
	:connectionId,
	CURRENT_TIMESTAMP,
	ARRAY[:ipAddress::cidr],
	:userGUID,
	'Queued',
	'Queued'
)
ON CONFLICT (
	tenantId,
	connectionId,
	userGUID
) DO UPDATE SET
	lastChanged = CURRENT_TIMESTAMP,
	ipAddresses = CASE WHEN links.ipAddresses IS NULL THEN EXCLUDED.ipAddresses WHEN ARRAY[:ipAddress::cidr] <@ links.ipAddresses THEN EXCLUDED.ipAddresses ELSE array_append(links.ipAddresses, :ipAddress) END,
	permission = 'Reconfiguring'
RETURNING
	*
]]></sql>

</statements>
